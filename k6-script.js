// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import "./libs/shim/jsonSchema.js";
import "./libs/shim/urijs.js";
import http from "k6/http";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    baseurl: "http://15.207.254.154:3002/api/v1",
    token: "Login to generate the token",
    URL: "http://15.207.254.154:3002s"
  },
  environment: {
    baseurl: "http://13.233.168.25:3002/api/v1",
    token: "",
    randomUserName: "",
    postFixUrl: "@unisolve.org",
    randomStudentName: "",
    admin: "admin",
    student: "student",
    mentor: "mentor",
    randomMentorName: "",
    evaluator: "evaluator",
    randomEvaluatorName: ""
  }
});

const files = {};
files["C:/Users/gururaj/Downloads/mentor_data.csv"] = http.file(
  open("C:/Users/gururaj/Downloads/mentor_data.csv", "b"),
  "mentor_data.csv"
);
files["C:/Users/gururaj/Downloads/evaluater_data.csv"] = http.file(
  open("C:/Users/gururaj/Downloads/evaluater_data.csv", "b"),
  "evaluater_data.csv"
);
// files[
//   "C:/Users/haris/OneDrive/Pictures/Screenshot 2022-05-31 085332.png"
// ] = http.file(
//   open(
//     "C:/Users/haris/OneDrive/Pictures/Screenshot 2022-05-31 085332.png",
//     "b"
//   ),
//   "Screenshot 2022-05-31 085332.png"
// );
files["C:/Users/gururaj/Downloads/organizations_data.csv"] = http.file(
  open("C:/Users/gururaj/Downloads/organizations_data.csv", "b"),
  "organizations_data.csv"
);
// files[
//   "/home/aman/Pictures/Screenshot from 2021-06-05 14-51-49.png"
// ] = http.file(
//   open("/home/aman/Pictures/Screenshot from 2021-06-05 14-51-49.png", "b"),
//   "Screenshot from 2021-06-05 14-51-49.png"
// );
// files[
//   "/home/aman/Pictures/Screenshot from 2022-03-23 22-34-31.png"
// ] = http.file(
//   open("/home/aman/Pictures/Screenshot from 2022-03-23 22-34-31.png", "b"),
//   "Screenshot from 2022-03-23 22-34-31.png"
// );
// files[
//   "C:/Users/haris/OneDrive/Pictures/Screenshot 2022-04-05 213415.png"
// ] = http.file(
//   open(
//     "C:/Users/haris/OneDrive/Pictures/Screenshot 2022-04-05 213415.png",
//     "b"
//   ),
//   "Screenshot 2022-04-05 213415.png"
// );

export default function() {
  group("V1", function() {
    group("Admins", function() {
      postman[Request]({
        name: "Login",
        id: "bfe1f65b-e9c2-4724-9cae-23966da11949",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "admin@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
            pm.test("Your test name", function() {
              var jsonData = pm.response.json();
              pm.expect(jsonData.message).to.eql("Login Successful");
            });
          });

          // Schema validation test
          const schema = {
            title: "Root Schema",
            type: "object",
            default: {},
            required: ["status", "status_type", "message", "count", "data"],
            properties: {
              status: {
                title: "The status Schema",
                type: "number",
                default: 0
              },
              status_type: {
                title: "The status_type Schema",
                type: "string",
                default: ""
              },
              message: {
                title: "The message Schema",
                type: "string",
                default: ""
              },
              count: {
                title: "The count Schema",
                type: "number",
                default: 0
              },
              data: {
                title: "The data Schema",
                type: "array",
                default: [],
                items: {
                  title: "A Schema",
                  type: "object",
                  default: {},
                  required: [
                    "user_id",
                    "name",
                    "full_name",
                    "status",
                    "role",
                    "token",
                    "type",
                    "expire"
                  ],
                  properties: {
                    user_id: {
                      title: "The user_id Schema",
                      type: "number",
                      default: 0
                    },
                    name: {
                      title: "The name Schema",
                      type: "string",
                      default: ""
                    },
                    full_name: {
                      title: "The full_name Schema",
                      type: "string",
                      default: ""
                    },
                    status: {
                      title: "The status Schema",
                      type: "string",
                      default: ""
                    },
                    role: {
                      title: "The role Schema",
                      type: "string",
                      default: ""
                    },
                    token: {
                      title: "The token Schema",
                      type: "string",
                      default: ""
                    },
                    type: {
                      title: "The type Schema",
                      type: "string",
                      default: ""
                    },
                    expire: {
                      title: "The expire Schema",
                      type: "string",
                      default: ""
                    }
                  }
                }
              }
            }
          };
          pm.test("Validate schema", () => {
            pm.response.to.have.jsonSchema(schema);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "LoginWithInvalidUser",
        id: "d4fd403c-1748-440c-8855-65ad33c76991",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "admin@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
            pm.test("Your test name", function() {
              var jsonData = pm.response.json();
              pm.expect(jsonData.message).to.eql("Login Successful");
            });
          });

          // Schema validation test
          const schema = {
            title: "Root Schema",
            type: "object",
            default: {},
            required: ["status", "status_type", "message", "count", "data"],
            properties: {
              status: {
                title: "The status Schema",
                type: "number",
                default: 0
              },
              status_type: {
                title: "The status_type Schema",
                type: "string",
                default: ""
              },
              message: {
                title: "The message Schema",
                type: "string",
                default: ""
              },
              count: {
                title: "The count Schema",
                type: "number",
                default: 0
              },
              data: {
                title: "The data Schema",
                type: "array",
                default: [],
                items: {
                  title: "A Schema",
                  type: "object",
                  default: {},
                  required: [
                    "user_id",
                    "name",
                    "full_name",
                    "status",
                    "role",
                    "token",
                    "type",
                    "expire"
                  ],
                  properties: {
                    user_id: {
                      title: "The user_id Schema",
                      type: "number",
                      default: 0
                    },
                    name: {
                      title: "The name Schema",
                      type: "string",
                      default: ""
                    },
                    full_name: {
                      title: "The full_name Schema",
                      type: "string",
                      default: ""
                    },
                    status: {
                      title: "The status Schema",
                      type: "string",
                      default: ""
                    },
                    role: {
                      title: "The role Schema",
                      type: "string",
                      default: ""
                    },
                    token: {
                      title: "The token Schema",
                      type: "string",
                      default: ""
                    },
                    type: {
                      title: "The type Schema",
                      type: "string",
                      default: ""
                    },
                    expire: {
                      title: "The expire Schema",
                      type: "string",
                      default: ""
                    }
                  }
                }
              }
            }
          };
          pm.test("Validate schema", () => {
            pm.response.to.have.jsonSchema(schema);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Register",
        id: "4b991060-f44c-4f18-b9d0-95e1901b11ae",
        method: "POST",
        address: "{{baseurl}}/auth/register",
        data:
          '{\r\n    "username": "{{admin}}{{randomUserName}}{{postFixUrl}}",\r\n    "full_name": "admin user",\r\n    "password": "wHm6eGCL7uFOArs=",\r\n    "role": "ADMIN",\r\n    "team_id": "12433",\r\n    "date_of_birth": "1989-06-20",\r\n    "qualification": "bs.c",\r\n    "city": "hyderabad",\r\n    "district": "somehthing",\r\n    "state": "tg",\r\n    "country": "bs.c",\r\n    "created_by": 1236547899\r\n}',
        pre() {
          function randomString(
            minValue,
            maxValue,
            dataSet = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZwewr"
          ) {
            if (!minValue) {
              minValue = 10;
              maxValue = 20;
            }

            if (!maxValue) {
              maxValue = minValue;
            }

            let length = _.random(minValue, maxValue),
              randomString = "";

            for (let i = 0; i < length; i++)
              randomString += dataSet.charAt(
                Math.floor(Math.random() * dataSet.length)
              );
            return randomString;
          }

          pm.environment.set("randomUserName", randomString());
        },
        post(response) {
          pm.test("User creation ", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eq("User registered successfully");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "LoginAfterRegister",
        id: "a83b7e25-1e2c-43e9-bd2e-f3e3fee4d9d1",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "{{admin}}{{randomUserName}}{{postFixUrl}}",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
            pm.test("login after new registration", function() {
              var jsonData = pm.response.json();
              pm.expect(jsonData.message).to.eql("Login Successful");
            });
          });

          // Schema validation test
          const schema = {
            title: "Root Schema",
            type: "object",
            default: {},
            required: ["status", "status_type", "message", "count", "data"],
            properties: {
              status: {
                title: "The status Schema",
                type: "number",
                default: 0
              },
              status_type: {
                title: "The status_type Schema",
                type: "string",
                default: ""
              },
              message: {
                title: "The message Schema",
                type: "string",
                default: ""
              },
              count: {
                title: "The count Schema",
                type: "number",
                default: 0
              },
              data: {
                title: "The data Schema",
                type: "array",
                default: [],
                items: {
                  title: "A Schema",
                  type: "object",
                  default: {},
                  required: [
                    "user_id",
                    "name",
                    "full_name",
                    "status",
                    "role",
                    "token",
                    "type",
                    "expire"
                  ],
                  properties: {
                    user_id: {
                      title: "The user_id Schema",
                      type: "number",
                      default: 0
                    },
                    name: {
                      title: "The name Schema",
                      type: "string",
                      default: ""
                    },
                    full_name: {
                      title: "The full_name Schema",
                      type: "string",
                      default: ""
                    },
                    status: {
                      title: "The status Schema",
                      type: "string",
                      default: ""
                    },
                    role: {
                      title: "The role Schema",
                      type: "string",
                      default: ""
                    },
                    token: {
                      title: "The token Schema",
                      type: "string",
                      default: ""
                    },
                    type: {
                      title: "The type Schema",
                      type: "string",
                      default: ""
                    },
                    expire: {
                      title: "The expire Schema",
                      type: "string",
                      default: ""
                    }
                  }
                }
              }
            }
          };
          pm.test("Validate schema", () => {
            pm.response.to.have.jsonSchema(schema);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "RegisterWithInvalidData",
        id: "71e05c5a-40b8-4111-b61d-6c5e3b112f67",
        method: "POST",
        address: "{{baseurl}}/auth/register",
        data:
          '{\r\n    "username": "",\r\n    "full_name": "",\r\n    "password": "",\r\n    "role": "",\r\n    "team_id": "",\r\n    "date_of_birth": "1989-06-20",\r\n    "qualification": "bs.c",\r\n    "city": "hyderabad",\r\n    "district": "somehthing",\r\n    "state": "tg",\r\n    "country": "bs.c",\r\n    "created_by": 1236547899\r\n}',
        pre() {
          function randomString(
            minValue,
            maxValue,
            dataSet = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          ) {
            if (!minValue) {
              minValue = 10;
              maxValue = 20;
            }

            if (!maxValue) {
              maxValue = minValue;
            }

            let length = _.random(minValue, maxValue),
              randomString = "";

            for (let i = 0; i < length; i++)
              randomString += dataSet.charAt(
                Math.floor(Math.random() * dataSet.length)
              );
            return randomString;
          }
          pm.environment.set("randomUserName", randomString());
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Logout",
        id: "f1d9394a-dea6-471b-b3df-89eab20a1b7d",
        method: "GET",
        address: "{{baseurl}}/auth/logout",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePassword",
        id: "a158f87f-db78-4627-aa76-f2e06f96ce77",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordOldPwdNull",
        id: "f6358749-adbf-490e-8813-b072e80cec9d",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordNewPwdNull",
        id: "120a6dc1-bdd0-40d3-8373-7daa4fc7778c",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordIDNull",
        id: "dda5dba2-ddd0-4d69-9a23-18182f60a033",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        post(response) {
          pm.test("When ID Password null", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.errors[0]).to.eql(
              "Qualification is required, it should not be empty."
            );
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "DynamicSignupForm",
        id: "67c2e09b-c3d1-4226-baa1-d4bf1ea70ed9",
        method: "POST",
        address: "{{baseurl}}/auth/dynamicSignupForm",
        data: '{\r\n    "studentName": true,\r\n    "phNumber": false\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "DynamicSignupForm",
        id: "c5c2ce65-3df6-4d10-83a7-572ac3078538",
        method: "GET",
        address: "{{baseurl}}/auth/dynamicSignupForm",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Students", function() {
      postman[Request]({
        name: "Login",
        id: "45ad7ff4-edc2-4b5d-9b95-5b5a90f4984a",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "student@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "LoginInvalidData",
        id: "55965ff2-babf-4242-a51b-a25e0ee9a23d",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "39usinfesoi@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Signup check", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("User not found");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Register",
        id: "2abcb8f8-29ba-4249-a097-92313bb0ff1a",
        method: "POST",
        address: "{{baseurl}}/auth/register",
        data:
          '{\r\n    "username": "{{student}}{{randomStudentName}}{{postFixUrl}}",\r\n    "full_name": "student user",\r\n    "password": "wHm6eGCL7uFOArs=",\r\n    "role": "STUDENT",\r\n    "team_id": "12433",\r\n    "date_of_birth": "1989-06-20",\r\n    "qualification": "bs.c",\r\n    "city": "hyderabad",\r\n    "district": "somehthing",\r\n    "state": "tg",\r\n    "country": "bs.c",\r\n    "created_by": 1236547899\r\n}',
        pre() {
          function randomString(
            minValue,
            maxValue,
            dataSet = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          ) {
            if (!minValue) {
              minValue = 10;
              maxValue = 20;
            }

            if (!maxValue) {
              maxValue = minValue;
            }

            let length = _.random(minValue, maxValue),
              randomString = "";

            for (let i = 0; i < length; i++)
              randomString += dataSet.charAt(
                Math.floor(Math.random() * dataSet.length)
              );
            return randomString;
          }
          pm.environment.set("randomStudentName", randomString());
        },
        post(response) {
          pm.test("Your test name", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("User registered successfully");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "LoginAfterRegister",
        id: "9d55b04f-22a6-4044-a829-07cca0cec149",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "{{student}}{{randomStudentName}}{{postFixUrl}}",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Logout",
        id: "4c70be7b-ef34-4cf0-8a38-575ae71af387",
        method: "GET",
        address: "{{baseurl}}/auth/logout",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePassword",
        id: "97a45ae4-4c90-4873-a5d9-61a64d0ab11d",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordOldPwdNull",
        id: "3bb7b3b2-45a5-4bbd-9d74-afe4f2806ce9",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "",\r\n    "new_password": "1234567891011"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordNewPwdNull",
        id: "3eb4d0a8-83cf-4af6-a751-73963e6cf1b9",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": ""\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordIDNull",
        id: "0501b729-4485-4a15-aa15-91035c0eca2f",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        post(response) {
          pm.test("When ID Password null", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.errors[0]).to.eql(
              "Qualification is required, it should not be empty."
            );
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Mentors", function() {
      postman[Request]({
        name: "Login",
        id: "dbe5b15c-538c-42a9-8342-c14e2d5c3330",
        method: "POST",
        address: "{{baseurl}}/mentors/login",
        data:
          '{\r\n    "username": "mentor@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Register",
        id: "f8f2308f-d954-4d21-a2a8-bfcd2cb91dda",
        method: "POST",
        address: "{{baseurl}}/mentors/register",
        data:
          '{\r\n    "username": "{{mentor}}{{randomMentorName}}{{postFixUrl}}",\r\n    "full_name": "mentor user",\r\n    "password": "wHm6eGCL7uFOArs=",\r\n    "mobile": "7989892334",\r\n    "role": "MENTOR",\r\n    "team_id": "12433",\r\n    "date_of_birth": "1989-06-20",\r\n    "organization_code" : "CHIREC1",\r\n    "qualification": "bs.c",\r\n    "city": "hyderabad",\r\n    "district": "somehthing",\r\n    "state": "tg",\r\n    "country": "bs.c",\r\n    "created_by": 1236547899\r\n}',
        pre() {
          function randomString(
            minValue,
            maxValue,
            dataSet = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          ) {
            if (!minValue) {
              minValue = 10;
              maxValue = 20;
            }

            if (!maxValue) {
              maxValue = minValue;
            }

            let length = _.random(minValue, maxValue),
              randomString = "";

            for (let i = 0; i < length; i++)
              randomString += dataSet.charAt(
                Math.floor(Math.random() * dataSet.length)
              );
            return randomString;
          }
          pm.environment.set("randomMentorName", randomString());
        },
        post(response) {
          pm.test("Your test name", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("User registered successfully");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "LoginAfterRegister",
        id: "39cd8862-1322-4668-9419-65bf10a5e17b",
        method: "POST",
        address: "{{baseurl}}/mentors/login",
        data:
          '{\r\n    "username": "{{mentor}}{{randomMentorName}}{{postFixUrl}}",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ValidateOTP",
        id: "f101dbe3-32b2-43c5-9cc7-63b6ddcaf630",
        method: "POST",
        address: "{{baseurl}}/mentors/validateOtp",
        data: '{\r\n    "user_id": "30",\r\n    "otp": "493547"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Logout",
        id: "0d9503b3-1280-4668-b316-d11e4f11b606",
        method: "GET",
        address: "{{baseurl}}/mentors/logout",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePassword",
        id: "1ccc62eb-1201-4f01-b0a9-db31f4a62cb0",
        method: "PUT",
        address: "{{baseurl}}/mentors/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordOldPwdNull",
        id: "98748d74-233e-4b40-897f-6c6dcfdf276c",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "",\r\n    "new_password": "1234567891011"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordNewPwdNull",
        id: "7b9e15b2-a735-4687-bbbb-3ccd578d4018",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": ""\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordIDNull",
        id: "825c0b57-8fdb-46a2-98b0-0ebcfcdf1f4f",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        post(response) {
          pm.test("When ID Password null", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.errors[0]).to.eql(
              "Qualification is required, it should not be empty."
            );
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Bulkupload",
        id: "37832dfb-8717-4a33-895c-622ab635ab0b",
        method: "POST",
        address: "{{baseurl}}/auth/mentor/bulkupload",
        data: {
          file: files["C:/Users/gururaj/Downloads/mentor_data.csv"]
        },
        post(response) {
          pm.test.skip("skip test", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Evaluater", function() {
      postman[Request]({
        name: "Login",
        id: "090c6ddc-53ec-4cfd-8c9b-30cbc380170c",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "evaluater@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Register",
        id: "20277b7d-5acd-48e1-8431-9ae01447ee86",
        method: "POST",
        address: "{{baseurl}}/auth/register",
        data:
          '{\r\n    "username": "{{evaluator}}{{randomEvaluatorName}}{{postFixUrl}}",\r\n    "full_name": "evaluater user",\r\n    "password": "wHm6eGCL7uFOArs=",\r\n    "role": "EVALUATER",\r\n    "team_id": "12433",\r\n    "date_of_birth": "1989-06-20",\r\n    "qualification": "bs.c",\r\n    "city": "hyderabad",\r\n    "district": "somehthing",\r\n    "state": "tg",\r\n    "country": "bs.c",\r\n    "created_by": 1236547899\r\n}',
        pre() {
          function randomString(
            minValue,
            maxValue,
            dataSet = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          ) {
            if (!minValue) {
              minValue = 10;
              maxValue = 20;
            }

            if (!maxValue) {
              maxValue = minValue;
            }

            let length = _.random(minValue, maxValue),
              randomString = "";

            for (let i = 0; i < length; i++)
              randomString += dataSet.charAt(
                Math.floor(Math.random() * dataSet.length)
              );
            return randomString;
          }
          pm.environment.set("randomEvaluatorName", randomString());
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "LoginAfterRegister",
        id: "e658ec80-4a3f-4d01-94b7-91e2613d4558",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n     "username": "{{evaluator}}{{randomEvaluatorName}}{{postFixUrl}}",\r\n     "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Logout",
        id: "f6d178f4-7ef0-4044-8e7d-6f4cdef5f3f3",
        method: "GET",
        address: "{{baseurl}}/auth/logout",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePassword",
        id: "c31134cf-de59-4db5-8fcb-b6ea646b5235",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Bulkupload",
        id: "6336c5f6-e89e-4c3b-916c-d923b3471d49",
        method: "POST",
        address: "{{baseurl}}/auth/evaluater/bulkupload",
        data: {
          file: files["C:/Users/user/Downloads/evaluater_data.csv"]
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Crud", function() {
      postman[Request]({
        name: "Crud",
        id: "f217a7e9-09d4-47cb-9092-e098c4d30dc9",
        method: "POST",
        address: "{{baseurl}}/crud/faqs",
        data:
          '// {\r\n//     "email": "admin@gamil.com",\r\n//     "password": "12345678910",\r\n//     "mobile": "1234567890",\r\n//     "qualification": "b.com",\r\n//     "created_by": 1236547899\r\n// }',
        post(response) {
          pm.test.skip("skip test", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CrudWithFile",
        id: "612751ed-6dc1-4fd1-8e49-f5f245a836da",
        method: "POST",
        address: "{{baseurl}}/crud/user/withfile",
        data: {
          email: "harish@inqui-lab.com",
          password: "welcome",
          full_name: "Harishkumar",
          image:
            files[
              "C:/Users/haris/OneDrive/Pictures/Screenshot 2022-05-31 085332.png"
            ],
          date_of_birth: "1987-09-02",
          mobile: "+917997156656",
          team_id: "",
          org_name: "inqui-lab",
          qualification: "MBA",
          stream: "ul",
          city: "Hyderabad",
          district: "ul",
          state: "ul",
          country: "ul",
          status: "ACTIVE",
          role: "ADMIN"
        },
        post(response) {
          pm.test.skip("skip test", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CrudWithBulkupload",
        id: "71fa8c49-480a-4422-ad96-116744d3c676",
        method: "POST",
        address: "{{baseurl}}/crud/organization/bulkupload",
        data: {
          data: files["C:/Users/gururaj/Downloads/organizations_data.csv"]
        },
        post(response) {
          pm.test.skip("skip test", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Crud",
        id: "b9fdc8de-dbbf-4d02-9a4c-2ecdf845deaa",
        method: "GET",
        address: "{{baseurl}}/crud/course",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Crud/{id}",
        id: "a73242cd-745e-4e3e-9422-645eb91b00ee",
        method: "GET",
        address: "{{baseurl}}/crud/user/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Crud/?param={data}",
        id: "11adf34d-5a80-4d72-a57f-114d0c8694db",
        method: "GET",
        address: "{{baseurl}}/crud/user?page=1&size=3",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Crud/{id}",
        id: "1c14c237-c2d7-4b02-9c52-5fa675fc5346",
        method: "PUT",
        address: "{{baseurl}}/crud/user/1",
        data: '{\r\n    "mobile": "1234967890"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CrudWithFile/{id}",
        id: "445641ac-4cd9-45f5-a2f2-764b6f71adee",
        method: "PUT",
        address: "{{baseurl}}/crud/user/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Delete crud",
        id: "735a4e68-b21d-4c4f-b2b5-af2fc9fa5b5e",
        method: "DELETE",
        address: "{{baseurl}}/crud/user/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Course Modules", function() {
      postman[Request]({
        name: "CourseModules",
        id: "ddc0129d-f257-4eff-974d-0e4ec8a9494e",
        method: "POST",
        address: "{{baseurl}}/courseModules",
        data:
          '{\r\n    "course_id": "12",\r\n    "title":"INSPIRATION",\r\n    "description": "a state of complete physical, mental and social well-being and not merely the absence of disease and infirmity"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseModules",
        id: "4f0362fa-63a7-4b99-bfb6-4df69c990ad5",
        method: "GET",
        address: "{{baseurl}}/courseModules",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseModules/{id}",
        id: "439a7975-c251-4c67-8a50-3f2ee1b46e74",
        method: "GET",
        address: "{{baseurl}}/courseModules/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseModules/{id}",
        id: "b8da2f60-d56c-4e63-bb8c-9f1f3d1761b7",
        method: "PUT",
        address: "{{baseurl}}/courseModules/1",
        data: '{\r\n    "status": "Completed"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseModules/{id}",
        id: "f1f7d708-7b70-4f3f-a158-8fd9bea80ed6",
        method: "DELETE",
        address: "{{baseurl}}/courseModules/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Course",
        id: "ff90be87-ca20-4952-a68f-39f35959db89",
        method: "POST",
        address: "{{baseurl}}/courses/withFile",
        data: {
          title: "test course1",
          description: "test desc 1",
          thumbnail:
            files["/home/aman/Pictures/Screenshot from 2021-06-05 14-51-49.png"]
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Course Topics", function() {
      postman[Request]({
        name: "CourseTopics",
        id: "eaeb4322-0ea9-42a9-9645-d70bd03345ab",
        method: "POST",
        address: "{{baseurl}}/courseTopics",
        data:
          '{\r\n    "course_module_id": "1",\r\n    "topic_type_id": "1",\r\n    "topic_type":"VIDEO",\r\n    "title":"Video 1"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseTopics",
        id: "dd9834dd-cf03-4294-abd7-8847a26d6d8c",
        method: "GET",
        address: "{{baseurl}}/courseTopics",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseTopics/{id}",
        id: "8994bb93-20e9-4f78-97de-f98cca7573da",
        method: "GET",
        address: "{{baseurl}}/courseTopics/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseTopics/{id}",
        id: "38e2a72e-3421-4d49-91d3-94b5e39b7856",
        method: "PUT",
        address: "{{baseurl}}/courseTopics/1",
        data: '{\r\n    "status": "Completed"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseTopics/{id}",
        id: "26f6454d-63ae-40ca-99cd-66ed718459a9",
        method: "DELETE",
        address: "{{baseurl}}/courseTopics/:id",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Update User Progresss",
        id: "2e93ec8b-616a-4db9-9e09-f6970a69b3b6",
        method: "POST",
        address: "{{baseurl}}/userTopicProgress",
        data:
          '{\n    "user_id":"1",\n    "course_topic_id":"1",\n    "status":"Completed"\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Courses", function() {
      postman[Request]({
        name: "Coruse",
        id: "46ac7c00-0206-4fa8-aeb0-4fa3b81a255c",
        method: "GET",
        address: "{{baseurl}}/courses/",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Course/{id}",
        id: "04547460-af34-43cf-b987-283adc76296f",
        method: "GET",
        address: "{{baseurl}}/courses/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Course/{id}",
        id: "c67aefa8-7408-4823-96d3-78ffbc6ce00c",
        method: "PUT",
        address: "{{baseurl}}/courses/1",
        data: '{\r\n    "status": "COMPLETED"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Course{id}",
        id: "ed2ebfce-008f-4519-9875-1f322b146b3e",
        method: "DELETE",
        address: "{{baseurl}}/courses/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Videos", function() {
      postman[Request]({
        name: "Videos",
        id: "fd828f9b-abe3-4c2c-a2d3-9a3e2b6f55e7",
        method: "POST",
        address: "{{baseurl}}/videos",
        data:
          '{\r\n    "module": "Health",\r\n    "video_stream_id": "BWUi6BS9T5Y"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Videos",
        id: "7cd70f44-4ee5-4967-ac61-8f1fd94db25a",
        method: "GET",
        address: "{{baseurl}}/videos",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Videos/{id}",
        id: "ca6487d1-9c4d-4967-91a4-ac3a58683b0c",
        method: "GET",
        address: "{{baseurl}}/videos/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Videos/{id}",
        id: "714e2202-7aa0-4034-9df0-1892ef4d3ced",
        method: "PUT",
        address: "{{baseurl}}/videos/1",
        data: '{\r\n    "status": "ACTIVE"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Videos/{id}",
        id: "5d0248c3-268e-40de-9c56-bf08c1dc6b85",
        method: "DELETE",
        address: "{{baseurl}}/videos/27",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Worksheets", function() {
      postman[Request]({
        name: "Worksheets",
        id: "81e4c4e5-6cc9-4310-8d23-566f6f4784bc",
        method: "POST",
        address: "{{baseurl}}/worksheets",
        data:
          '{\r\n    "course_module_id": "1",\r\n    "topic_type_id": "1",\r\n    "topic_type":"VIDEO",\r\n    "title":"Video 1"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Worksheets/{id}/response",
        id: "fadd70d5-5756-4800-a499-d9439a3e3951",
        method: "POST",
        address: "{{baseurl}}/worksheets/1/response",
        data: {
          attachment_1:
            files["/home/aman/Pictures/Screenshot from 2022-03-23 22-34-31.png"]
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "worksheets",
        id: "b50ecb2a-d5a1-4322-a3e5-33cb13f1dbed",
        method: "GET",
        address: "{{baseurl}}/worksheets",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "worksheets/{id}",
        id: "df681690-cb63-484e-85d9-ef1da56f9d05",
        method: "GET",
        address: "{{baseurl}}/worksheets/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "worksheets/{id}",
        id: "60821178-100f-46f0-a1e5-f9b4aac985a6",
        method: "PUT",
        address: "{{baseurl}}/worksheets/1",
        data: '{\r\n    "status": "COMPLETED"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "worksheets/{id}",
        id: "64aaf912-c635-4f5c-b086-c439a5cdf4fb",
        method: "DELETE",
        address: "{{baseurl}}/worksheets/:id",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Teams", function() {
      postman[Request]({
        name: "Teams",
        id: "7ce02e5c-d4c8-4922-b6c5-8b9ca01dd268",
        method: "POST",
        address: "{{baseurl}}/teams",
        data:
          '{\r\n    "mentor_id": "12",\r\n    "team_name": "fast_five"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Teams",
        id: "deac124c-6212-4468-be28-068118f26db8",
        method: "GET",
        address: "{{baseurl}}/teams",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Teams{id}",
        id: "728f969f-a381-4b7a-a668-d16ab8d93659",
        method: "GET",
        address: "{{baseurl}}/teams/:id",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Teams/{id}",
        id: "de7167c9-0cb0-4870-849e-ec9eef4a835c",
        method: "PUT",
        address: "{{baseurl}}/teams/:id",
        data: '{\r\n    "status": "Active"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Teams/{id}",
        id: "ab822c30-a30c-4d8d-9f35-abc94330da4a",
        method: "DELETE",
        address: "{{baseurl}}/teams/:id",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Notifications", function() {
      postman[Request]({
        name: "Notifications sent to current user",
        id: "5df4ff3a-99a7-449b-97d7-a9bc4c74cd73",
        method: "GET",
        address: "{{baseurl}}/notifications/tome",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Sent a new Notifications",
        id: "0dd35f0b-f67b-466f-9a95-577b2c06e652",
        method: "POST",
        address: "{{baseurl}}/notifications/send",
        data:
          '{\r\n    "title": "My Notification",\r\n    "message": "This is a test notification",\r\n    "target_audience": "ALL",\r\n    "notification_type": "PUSH",\r\n    "status": "PUBLISHED"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Sent a new Notifications with Poster",
        id: "e319bd3c-9b87-40b7-b9d2-8664c5ecee25",
        method: "POST",
        address: "{{baseurl}}/notifications/sendwithposter",
        data: {
          title: "My Notification",
          message: "This is a test notification",
          target_audience: "ALL",
          notification_type: "PUSH",
          status: "PUBLISHED",
          image:
            files[
              "C:/Users/haris/OneDrive/Pictures/Screenshot 2022-04-05 213415.png"
            ]
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Organization", function() {
      postman[Request]({
        name: "Organizations",
        id: "e03db9e4-9a34-4934-b7ea-9571d39c5a27",
        method: "POST",
        address: "{{baseurl}}/organizations",
        data:
          '{\r\n    "organization_name": "rk college",\r\n    "organization_code": "rk223",\r\n    "details": "rk college intermedite junior"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Organization check",
        id: "f3865b03-8e8a-4cb5-a85c-cf8446d5a3e2",
        method: "POST",
        address: "{{baseurl}}/organizations",
        data:
          '{\r\n    "organization_code": "rk223",\r\n        "organization_name": "rk college"\r\n\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Organizations/withFile",
        id: "8c4eb695-7b7c-4006-a44f-7905c95bde09",
        method: "POST",
        address: "{{baseurl}}/organizations",
        data:
          '{\r\n    "organization_name": "rk college",\r\n    "organization_code": "rk223",\r\n    "details": "rk college intermedite junior"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Organizations",
        id: "d36dcb89-3d1d-4cfb-8ffd-3ac21eaca413",
        method: "GET",
        address: "{{baseurl}}/organizations",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Organizations/{id}",
        id: "0f227548-1c52-4d0e-a550-89b6a3797539",
        method: "GET",
        address: "{{baseurl}}/organizations/114",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Organizations/{id}",
        id: "c75e303c-475e-4c6e-88a9-ad6dd14adf51",
        method: "PUT",
        address: "{{baseurl}}/organizations/113",
        data: '{\r\n    "status": "INACTIVE"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Organizations/{id}",
        id: "db5192b6-d08f-4fd9-bed0-81d0298ea40b",
        method: "DELETE",
        address: "{{baseurl}}/organizations/113",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Faqs", function() {
      postman[Request]({
        name: "Faqs",
        id: "8bb415c6-53ba-4617-9932-110305eea245",
        method: "POST",
        address: "{{baseurl}}/faqs",
        data:
          '{\r\n    "question": "Health",\r\n    "answer": "BWUi6BS9T5Y",\r\n    "faq_category_id":"1"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Faqs",
        id: "12492e9d-5bd7-4f86-a657-f1f70d07f4d5",
        method: "GET",
        address: "{{baseurl}}/faqs",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Faqs/{id}",
        id: "0997d9b7-e247-485c-aac5-82de87be5034",
        method: "GET",
        address: "{{baseurl}}/faqs/3",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Faqs/{id}",
        id: "e18e3e07-d735-4af9-baa7-5fdd9bd8c1db",
        method: "PUT",
        address: "{{baseurl}}/faqs/1",
        data: '{\r\n    "status": "ACTIVE"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Faqs/{id}",
        id: "a5296b50-a317-4fea-a366-507642b529da",
        method: "DELETE",
        address: "{{baseurl}}/faqs/27",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("FaqCategories", function() {
      postman[Request]({
        name: "FaqCategories",
        id: "19fb2cd0-da8d-4b9e-a936-ce178cd0a42b",
        method: "POST",
        address: "{{baseurl}}/faqCategories",
        data: '{\r\n    "category_name": "Health"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqCategories",
        id: "928f659b-412c-4257-8180-5a7286609913",
        method: "GET",
        address: "{{baseurl}}/faqCategories",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqCategories/{id}",
        id: "c2c8648e-d8ae-4b51-8314-a12a9292747e",
        method: "GET",
        address: "{{baseurl}}/faqCategories/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqCategories/{id}",
        id: "c4272d99-531a-448a-97f1-391ec18682c9",
        method: "PUT",
        address: "{{baseurl}}/faqCategories/1",
        data: '{\r\n    "status": "ACTIVE"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqCategories/{id}",
        id: "7bb35d7b-3bd4-4915-af8d-68de1e6199e1",
        method: "DELETE",
        address: "{{baseurl}}/faqCategories/27",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    postman[Request]({
      name: "Healthcheck",
      id: "02588af1-577b-40ce-9af5-d59b5ec7bd0e",
      method: "GET",
      address: "{{URL}}/healthcheck",
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
      }
    });
  });
}
