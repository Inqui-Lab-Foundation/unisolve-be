// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import "./libs/shim/jsonSchema.js";
import "./libs/shim/urijs.js";
import http from "k6/http";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    baseurl: "http://15.207.254.154:3002/api/v1",
    token: "Login to generate the token",
    URL: "http://15.207.254.154:3002s"
  },
  environment: {
    baseurl: "http://qa.inquitech.in:3002/api/v1",
    token: "",
    randomUserName: "",
    postFixUrl: "@unisolve.org",
    randomStudentName: "",
    admin: "admin",
    student: "student",
    mentor: "mentor",
    randomMentorName: "",
    evaluator: "evaluator",
    randomEvaluatorName: "",
    faq_id: "",
    faq_category_id: ""
  }
});

const files = {};
files["C:/Users/gururaj/Downloads/mentor_data.csv"] = http.file(
  open("C:/Users/gururaj/Downloads/mentor_data.csv", "b"),
  "mentor_data.csv"
);
// files["C:/Users/gururaj/Downloads/evaluater_data.csv"] = http.file(
//   open("C:/Users/gururaj/Downloads/evaluater_data.csv", "b"),
//   "evaluater_data.csv"
// );
// files[
//   "C:/Users/haris/OneDrive/Pictures/Screenshot 2022-05-31 085332.png"
// ] = http.file(
//   open(
//     "C:/Users/haris/OneDrive/Pictures/Screenshot 2022-05-31 085332.png",
//     "b"
//   ),
//   "Screenshot 2022-05-31 085332.png"
// );
// files["C:/Users/gururaj/Downloads/organizations_data.csv"] = http.file(
//   open("C:/Users/gururaj/Downloads/organizations_data.csv", "b"),
//   "organizations_data.csv"
// );
// files[
//   "/home/aman/Pictures/Screenshot from 2021-06-05 14-51-49.png"
// ] = http.file(
//   open("/home/aman/Pictures/Screenshot from 2021-06-05 14-51-49.png", "b"),
//   "Screenshot from 2021-06-05 14-51-49.png"
// );
// files[
//   "/home/aman/Pictures/Screenshot from 2022-03-23 22-34-31.png"
// ] = http.file(
//   open("/home/aman/Pictures/Screenshot from 2022-03-23 22-34-31.png", "b"),
//   "Screenshot from 2022-03-23 22-34-31.png"
// );
// files[
//   "C:/Users/haris/OneDrive/Pictures/Screenshot 2022-04-05 213415.png"
// ] = http.file(
//   open(
//     "C:/Users/haris/OneDrive/Pictures/Screenshot 2022-04-05 213415.png",
//     "b"
//   ),
//   "Screenshot 2022-04-05 213415.png"
// );

export default function() {
  group("V1", function() {
    group("Admins", function() {
      postman[Request]({
        name: "Login",
        id: "a8160ff0-1f28-4185-90ea-b8f757eb9547",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "admin@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
            pm.test("Your test name", function() {
              var jsonData = pm.response.json();
              pm.expect(jsonData.message).to.eql("Login Successful");
            });
          });

          // Schema validation test
          const schema = {
            title: "Root Schema",
            type: "object",
            default: {},
            required: ["status", "status_type", "message", "count", "data"],
            properties: {
              status: {
                title: "The status Schema",
                type: "number",
                default: 0
              },
              status_type: {
                title: "The status_type Schema",
                type: "string",
                default: ""
              },
              message: {
                title: "The message Schema",
                type: "string",
                default: ""
              },
              count: {
                title: "The count Schema",
                type: "number",
                default: 0
              },
              data: {
                title: "The data Schema",
                type: "array",
                default: [],
                items: {
                  title: "A Schema",
                  type: "object",
                  default: {},
                  required: [
                    "user_id",
                    "name",
                    "full_name",
                    "status",
                    "role",
                    "token",
                    "type",
                    "expire"
                  ],
                  properties: {
                    user_id: {
                      title: "The user_id Schema",
                      type: "number",
                      default: 0
                    },
                    name: {
                      title: "The name Schema",
                      type: "string",
                      default: ""
                    },
                    full_name: {
                      title: "The full_name Schema",
                      type: "string",
                      default: ""
                    },
                    status: {
                      title: "The status Schema",
                      type: "string",
                      default: ""
                    },
                    role: {
                      title: "The role Schema",
                      type: "string",
                      default: ""
                    },
                    token: {
                      title: "The token Schema",
                      type: "string",
                      default: ""
                    },
                    type: {
                      title: "The type Schema",
                      type: "string",
                      default: ""
                    },
                    expire: {
                      title: "The expire Schema",
                      type: "string",
                      default: ""
                    }
                  }
                }
              }
            }
          };
          pm.test("Validate schema", () => {
            pm.response.to.have.jsonSchema(schema);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "LoginWithInvalidUser",
        id: "3400796c-7e72-434c-9d93-b431f8fecac1",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "admin@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
            pm.test("Your test name", function() {
              var jsonData = pm.response.json();
              pm.expect(jsonData.message).to.eql("Login Successful");
            });
          });

          // Schema validation test
          const schema = {
            title: "Root Schema",
            type: "object",
            default: {},
            required: ["status", "status_type", "message", "count", "data"],
            properties: {
              status: {
                title: "The status Schema",
                type: "number",
                default: 0
              },
              status_type: {
                title: "The status_type Schema",
                type: "string",
                default: ""
              },
              message: {
                title: "The message Schema",
                type: "string",
                default: ""
              },
              count: {
                title: "The count Schema",
                type: "number",
                default: 0
              },
              data: {
                title: "The data Schema",
                type: "array",
                default: [],
                items: {
                  title: "A Schema",
                  type: "object",
                  default: {},
                  required: [
                    "user_id",
                    "name",
                    "full_name",
                    "status",
                    "role",
                    "token",
                    "type",
                    "expire"
                  ],
                  properties: {
                    user_id: {
                      title: "The user_id Schema",
                      type: "number",
                      default: 0
                    },
                    name: {
                      title: "The name Schema",
                      type: "string",
                      default: ""
                    },
                    full_name: {
                      title: "The full_name Schema",
                      type: "string",
                      default: ""
                    },
                    status: {
                      title: "The status Schema",
                      type: "string",
                      default: ""
                    },
                    role: {
                      title: "The role Schema",
                      type: "string",
                      default: ""
                    },
                    token: {
                      title: "The token Schema",
                      type: "string",
                      default: ""
                    },
                    type: {
                      title: "The type Schema",
                      type: "string",
                      default: ""
                    },
                    expire: {
                      title: "The expire Schema",
                      type: "string",
                      default: ""
                    }
                  }
                }
              }
            }
          };
          pm.test("Validate schema", () => {
            pm.response.to.have.jsonSchema(schema);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Register",
        id: "bbab812f-c80b-4f05-9f26-46581349e7c0",
        method: "POST",
        address: "{{baseurl}}/auth/register",
        data:
          '{\r\n    "username": "{{admin}}{{randomUserName}}{{postFixUrl}}",\r\n    "full_name": "admin user",\r\n    "password": "wHm6eGCL7uFOArs=",\r\n    "role": "ADMIN",\r\n    "team_id": "12433",\r\n    "date_of_birth": "1989-06-20",\r\n    "qualification": "bs.c",\r\n    "city": "hyderabad",\r\n    "district": "somehthing",\r\n    "state": "tg",\r\n    "country": "bs.c",\r\n    "created_by": 1236547899\r\n}',
        pre() {
          function randomString(
            minValue,
            maxValue,
            dataSet = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZwewr"
          ) {
            if (!minValue) {
              minValue = 10;
              maxValue = 20;
            }

            if (!maxValue) {
              maxValue = minValue;
            }

            let length = _.random(minValue, maxValue),
              randomString = "";

            for (let i = 0; i < length; i++)
              randomString += dataSet.charAt(
                Math.floor(Math.random() * dataSet.length)
              );
            return randomString;
          }

          pm.environment.set("randomUserName", randomString());
        },
        post(response) {
          pm.test("User creation ", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eq("User registered successfully");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "LoginAfterRegister",
        id: "7a20a80f-1db0-4e90-a86d-74b002919bf0",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "{{admin}}{{randomUserName}}{{postFixUrl}}",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
            pm.test("login after new registration", function() {
              var jsonData = pm.response.json();
              pm.expect(jsonData.message).to.eql("Login Successful");
            });
          });

          // Schema validation test
          const schema = {
            title: "Root Schema",
            type: "object",
            default: {},
            required: ["status", "status_type", "message", "count", "data"],
            properties: {
              status: {
                title: "The status Schema",
                type: "number",
                default: 0
              },
              status_type: {
                title: "The status_type Schema",
                type: "string",
                default: ""
              },
              message: {
                title: "The message Schema",
                type: "string",
                default: ""
              },
              count: {
                title: "The count Schema",
                type: "number",
                default: 0
              },
              data: {
                title: "The data Schema",
                type: "array",
                default: [],
                items: {
                  title: "A Schema",
                  type: "object",
                  default: {},
                  required: [
                    "user_id",
                    "name",
                    "full_name",
                    "status",
                    "role",
                    "token",
                    "type",
                    "expire"
                  ],
                  properties: {
                    user_id: {
                      title: "The user_id Schema",
                      type: "number",
                      default: 0
                    },
                    name: {
                      title: "The name Schema",
                      type: "string",
                      default: ""
                    },
                    full_name: {
                      title: "The full_name Schema",
                      type: "string",
                      default: ""
                    },
                    status: {
                      title: "The status Schema",
                      type: "string",
                      default: ""
                    },
                    role: {
                      title: "The role Schema",
                      type: "string",
                      default: ""
                    },
                    token: {
                      title: "The token Schema",
                      type: "string",
                      default: ""
                    },
                    type: {
                      title: "The type Schema",
                      type: "string",
                      default: ""
                    },
                    expire: {
                      title: "The expire Schema",
                      type: "string",
                      default: ""
                    }
                  }
                }
              }
            }
          };
          pm.test("Validate schema", () => {
            pm.response.to.have.jsonSchema(schema);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "RegisterWithInvalidData",
        id: "015ee33b-ba42-4eb1-95a9-518c7056262f",
        method: "POST",
        address: "{{baseurl}}/auth/register",
        data:
          '{\r\n    "username": "",\r\n    "full_name": "",\r\n    "password": "",\r\n    "role": "",\r\n    "team_id": "",\r\n    "date_of_birth": "1989-06-20",\r\n    "qualification": "bs.c",\r\n    "city": "hyderabad",\r\n    "district": "somehthing",\r\n    "state": "tg",\r\n    "country": "bs.c",\r\n    "created_by": 1236547899\r\n}',
        pre() {
          function randomString(
            minValue,
            maxValue,
            dataSet = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          ) {
            if (!minValue) {
              minValue = 10;
              maxValue = 20;
            }

            if (!maxValue) {
              maxValue = minValue;
            }

            let length = _.random(minValue, maxValue),
              randomString = "";

            for (let i = 0; i < length; i++)
              randomString += dataSet.charAt(
                Math.floor(Math.random() * dataSet.length)
              );
            return randomString;
          }
          pm.environment.set("randomUserName", randomString());
        },
        post(response) {
          pm.test("Status code is 406", function() {
            pm.response.to.have.status(406);
          });

          pm.test("Your test name", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("Not Acceptable");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Logout",
        id: "a9f06f72-4d63-4d47-a5a6-4daacfe9711b",
        method: "GET",
        address: "{{baseurl}}/auth/logout",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePassword",
        id: "88252846-82f3-4154-ad8d-75f17b51146d",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordOldPwdNull",
        id: "3ca8d12f-6009-4606-9a60-8c32c598d643",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "",\r\n    "new_password": "1234567891011"\r\n}',
        post(response) {
          pm.test("password not match", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.errors[0]).to.eql(
              "Password is required, it should not be empty."
            );
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordNewPwdNull",
        id: "0c73f275-4752-4cb4-b023-30057856aece",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": ""\r\n}',
        post(response) {
          pm.test("New password null", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.errors[0]).to.eql(
              "Password is required, it should not be empty."
            );
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordIDNull",
        id: "eaf19f44-972f-4a48-809e-39308cd87268",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        post(response) {
          pm.test("When ID Password null", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.errors[0]).to.eql(
              "Qualification is required, it should not be empty."
            );
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "DynamicSignupForm",
        id: "bb9111d4-2f90-473e-9a47-6fe56db1cecb",
        method: "POST",
        address: "{{baseurl}}/auth/dynamicSignupForm",
        data: '{\r\n    "studentName": true,\r\n    "phNumber": false\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "DynamicSignupForm",
        id: "6a3a2387-5c42-46d2-a66f-acf7f4f3c533",
        method: "GET",
        address: "{{baseurl}}/auth/dynamicSignupForm",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Students", function() {
      postman[Request]({
        name: "Login",
        id: "01c22fbc-3897-419e-8f95-76493d9a114d",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "student@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "LoginInvalidData",
        id: "d081257a-b284-4fab-91ee-7a045889698f",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "39usinfesoi@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Signup check", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("User not found");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Register",
        id: "83c1f40b-9381-47b2-ad6a-e6f8ff6cc619",
        method: "POST",
        address: "{{baseurl}}/auth/register",
        data:
          '{\r\n    "username": "{{student}}{{randomStudentName}}{{postFixUrl}}",\r\n    "full_name": "student user",\r\n    "password": "wHm6eGCL7uFOArs=",\r\n    "role": "STUDENT",\r\n    "team_id": "12433",\r\n    "date_of_birth": "1989-06-20",\r\n    "qualification": "bs.c",\r\n    "city": "hyderabad",\r\n    "district": "somehthing",\r\n    "state": "tg",\r\n    "country": "bs.c",\r\n    "created_by": 1236547899\r\n}',
        pre() {
          function randomString(
            minValue,
            maxValue,
            dataSet = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          ) {
            if (!minValue) {
              minValue = 10;
              maxValue = 20;
            }

            if (!maxValue) {
              maxValue = minValue;
            }

            let length = _.random(minValue, maxValue),
              randomString = "";

            for (let i = 0; i < length; i++)
              randomString += dataSet.charAt(
                Math.floor(Math.random() * dataSet.length)
              );
            return randomString;
          }
          pm.environment.set("randomStudentName", randomString());
        },
        post(response) {
          pm.test("Your test name", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("User registered successfully");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "LoginAfterRegister",
        id: "37c187e2-941b-44c9-af40-1c199446837a",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "{{student}}{{randomStudentName}}{{postFixUrl}}",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Logout",
        id: "ce6fb502-fce4-4c87-be01-609942540a45",
        method: "GET",
        address: "{{baseurl}}/auth/logout",
        post(response) {
          pm.test("Logout from App", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.data).to.eql("Logout Successful");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePassword",
        id: "0299a7e1-c655-4b52-ad2f-ab8140dcdf8b",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "wHm6eGCL7uFOArs=",\r\n    "new_password": "wHm6eGCL7uFOArs="\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordOldPwdNull",
        id: "a154b730-6d0c-4282-b801-3a71184fc6a9",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "",\r\n    "new_password": "1234567891011"\r\n}',
        post(response) {
          pm.test("password not match", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.errors[0]).to.eql(
              "Password is required, it should not be empty."
            );
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordNewPwdNull",
        id: "9a414cb2-87ce-413a-b359-c06184090de3",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": ""\r\n}',
        post(response) {
          pm.test("New password null", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.errors[0]).to.eql(
              "Password is required, it should not be empty."
            );
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordIDNull",
        id: "8ba96b86-c6c1-4987-b45a-84e8cb39820c",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        post(response) {
          pm.test("When ID Password null", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.errors[0]).to.eql(
              "Qualification is required, it should not be empty."
            );
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Mentors", function() {
      postman[Request]({
        name: "Login",
        id: "4d53879d-3036-4ae2-9119-06c3a92b9c65",
        method: "POST",
        address: "{{baseurl}}/mentors/login",
        data:
          '{\r\n    "username": "mentor@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Register",
        id: "7be45b2a-f67f-4bf1-9cd6-7fd8667c32ad",
        method: "POST",
        address: "{{baseurl}}/mentors/register",
        data:
          '{\r\n    "username": "{{mentor}}{{randomMentorName}}{{postFixUrl}}",\r\n    "full_name": "mentor user",\r\n    "password": "wHm6eGCL7uFOArs=",\r\n    "mobile": "7989892334",\r\n    "role": "MENTOR",\r\n    "team_id": "12433",\r\n    "date_of_birth": "1989-06-20",\r\n    "organization_code" : "rk223",\r\n    "qualification": "bs.c",\r\n    "city": "hyderabad",\r\n    "district": "somehthing",\r\n    "state": "tg",\r\n    "country": "bs.c",\r\n    "created_by": 1236547899\r\n}',
        pre() {
          function randomString(
            minValue,
            maxValue,
            dataSet = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          ) {
            if (!minValue) {
              minValue = 10;
              maxValue = 20;
            }

            if (!maxValue) {
              maxValue = minValue;
            }

            let length = _.random(minValue, maxValue),
              randomString = "";

            for (let i = 0; i < length; i++)
              randomString += dataSet.charAt(
                Math.floor(Math.random() * dataSet.length)
              );
            return randomString;
          }
          pm.environment.set("randomMentorName", randomString());
        },
        post(response) {
          pm.test("Your test name", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("User registered successfully");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "LoginAfterRegister",
        id: "46fe25dd-977d-4a1a-9b42-fa83f4e2f857",
        method: "POST",
        address: "{{baseurl}}/mentors/login",
        data:
          '{\r\n    "username": "{{mentor}}{{randomMentorName}}{{postFixUrl}}",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ValidateOTP",
        id: "308e72e4-14ab-4718-880c-206bcab36996",
        method: "POST",
        address: "{{baseurl}}/mentors/validateOtp",
        data: '{\r\n    "user_id": "30",\r\n    "otp": "493547"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Logout",
        id: "062e480f-c144-4bf5-9244-bed90c898afd",
        method: "GET",
        address: "{{baseurl}}/mentors/logout",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePassword",
        id: "d62bd2f4-9d1c-47bc-bdfa-66947d62d093",
        method: "PUT",
        address: "{{baseurl}}/mentors/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordOldPwdNull",
        id: "bf053b30-9fa2-4797-9e3a-1f99977ea5c2",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "",\r\n    "new_password": "1234567891011"\r\n}',
        post(response) {
          pm.test("password not match", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.errors[0]).to.eql(
              "Password is required, it should not be empty."
            );
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordNewPwdNull",
        id: "c2fe2631-af6d-4675-97a5-91f20d1e7e45",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": ""\r\n}',
        post(response) {
          pm.test("New password null", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.errors[0]).to.eql(
              "Password is required, it should not be empty."
            );
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePasswordIDNull",
        id: "f01fd154-6048-4820-8d1f-085281600d8c",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        post(response) {
          pm.test("When ID Password null", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.errors[0]).to.eql(
              "Qualification is required, it should not be empty."
            );
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Bulkupload",
        id: "13763262-2e81-4223-b4dd-9f2f9d261a2e",
        method: "POST",
        address: "{{baseurl}}/auth/mentor/bulkupload",
        data: {
          file: files["C:/Users/gururaj/Downloads/mentor_data.csv"]
        },
        post(response) {
          pm.test.skip("skip test", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Evaluater", function() {
      postman[Request]({
        name: "Login",
        id: "40d0fb9a-2d1b-4c7a-8822-4bfe6aeb8847",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n    "username": "evaluater@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Register",
        id: "5a88e39d-4013-425d-b15d-b50904d65a20",
        method: "POST",
        address: "{{baseurl}}/auth/register",
        data:
          '{\r\n    "username": "{{evaluator}}{{randomEvaluatorName}}{{postFixUrl}}",\r\n    "full_name": "evaluater user",\r\n    "password": "wHm6eGCL7uFOArs=",\r\n    "role": "EVALUATER",\r\n    "team_id": "12433",\r\n    "date_of_birth": "1989-06-20",\r\n    "qualification": "bs.c",\r\n    "city": "hyderabad",\r\n    "district": "somehthing",\r\n    "state": "tg",\r\n    "country": "bs.c",\r\n    "created_by": 1236547899\r\n}',
        pre() {
          function randomString(
            minValue,
            maxValue,
            dataSet = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          ) {
            if (!minValue) {
              minValue = 10;
              maxValue = 20;
            }

            if (!maxValue) {
              maxValue = minValue;
            }

            let length = _.random(minValue, maxValue),
              randomString = "";

            for (let i = 0; i < length; i++)
              randomString += dataSet.charAt(
                Math.floor(Math.random() * dataSet.length)
              );
            return randomString;
          }
          pm.environment.set("randomEvaluatorName", randomString());
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "LoginAfterRegister",
        id: "9331dccb-14a5-4414-99f4-ec1f2a8c2003",
        method: "POST",
        address: "{{baseurl}}/auth/login",
        data:
          '{\r\n     "username": "{{evaluator}}{{randomEvaluatorName}}{{postFixUrl}}",\r\n     "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
          });

          pm.test("Login Successful", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("Login Successful");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Logout",
        id: "99c207d4-d82b-49b9-bb39-cf1e96113180",
        method: "GET",
        address: "{{baseurl}}/auth/logout",
        post(response) {
          pm.test("Logout from App", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("Logout Successful");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "ChangePassword",
        id: "0a680b1b-872d-4440-97d6-9823d54b08a8",
        method: "PUT",
        address: "{{baseurl}}/auth/changePassword",
        data:
          '{\r\n    "user_id": "4",\r\n    "old_password": "12345678910",\r\n    "new_password": "1234567891011"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Bulkupload",
        id: "d7a583ae-f702-46ee-8640-e4f31337190c",
        method: "POST",
        address: "{{baseurl}}/auth/evaluater/bulkupload",
        data: {
          file: files["C:/Users/user/Downloads/evaluater_data.csv"]
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Crud", function() {
      postman[Request]({
        name: "Crud",
        id: "a270e163-9387-4284-9c61-30fff957805a",
        method: "POST",
        address: "{{baseurl}}/crud/faqs",
        data:
          '// {\r\n//     "email": "admin@gamil.com",\r\n//     "password": "12345678910",\r\n//     "mobile": "1234567890",\r\n//     "qualification": "b.com",\r\n//     "created_by": 1236547899\r\n// }',
        post(response) {
          pm.test.skip("skip test", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CrudWithFile",
        id: "c13ffc95-e85c-43a1-829a-265958e4b67a",
        method: "POST",
        address: "{{baseurl}}/crud/user/withfile",
        data: {
          email: "harish@inqui-lab.com",
          password: "welcome",
          full_name: "Harishkumar",
          image:
            files[
              "C:/Users/haris/OneDrive/Pictures/Screenshot 2022-05-31 085332.png"
            ],
          date_of_birth: "1987-09-02",
          mobile: "+917997156656",
          team_id: "",
          org_name: "inqui-lab",
          qualification: "MBA",
          stream: "ul",
          city: "Hyderabad",
          district: "ul",
          state: "ul",
          country: "ul",
          status: "ACTIVE",
          role: "ADMIN"
        },
        post(response) {
          pm.test.skip("skip test", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CrudWithBulkupload",
        id: "dfda201e-bdba-4ba7-a3bf-da3f2dc930d2",
        method: "POST",
        address: "{{baseurl}}/crud/organization/bulkupload",
        data: {
          data: files["C:/Users/gururaj/Downloads/organizations_data.csv"]
        },
        post(response) {
          pm.test.skip("skip test", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Crud",
        id: "3a33653f-6845-4640-bc8b-4fe620401cd4",
        method: "GET",
        address: "{{baseurl}}/crud/course",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Crud/{id}",
        id: "b9bab300-e4f5-4a6c-b573-1d8c3153ce99",
        method: "GET",
        address: "{{baseurl}}/crud/user/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Crud/?param={data}",
        id: "a8c4589d-3cc2-45ea-9f21-ac7d5b1fffb0",
        method: "GET",
        address: "{{baseurl}}/crud/user?page=1&size=3",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Crud/{id}",
        id: "1ac3804c-f158-49c4-a353-9b21205793e1",
        method: "PUT",
        address: "{{baseurl}}/crud/user/1",
        data: '{\r\n    "mobile": "1234967890"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CrudWithFile/{id}",
        id: "8eabde50-f316-43c8-8382-a63bce9f3060",
        method: "PUT",
        address: "{{baseurl}}/crud/user/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Delete crud",
        id: "11c43e89-fc0a-4033-ac72-33d0b1fd545c",
        method: "DELETE",
        address: "{{baseurl}}/crud/user/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Course Modules", function() {
      postman[Request]({
        name: "CourseModules",
        id: "812da515-8d0f-49ec-8bb0-bf02ff02ad7f",
        method: "POST",
        address: "{{baseurl}}/courseModules",
        data:
          '{\r\n    "course_id": "13",\r\n    "title":"INSPIRATION",\r\n    "description": "a state of complete physical, mental and social well-being and not merely the absence of disease and infirmity"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseModules",
        id: "4646ef13-64f1-4440-9489-26709a65e256",
        method: "GET",
        address: "{{baseurl}}/courseModules",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseModules/{id}",
        id: "004014a7-0d46-4270-b6a7-28b05196b5c6",
        method: "GET",
        address: "{{baseurl}}/courseModules/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseModules/{id}",
        id: "045180e8-912d-418d-bf96-784f9db8a0d0",
        method: "PUT",
        address: "{{baseurl}}/courseModules/1",
        data: '{\r\n    "status": "Completed"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseModules/{id}",
        id: "6f225abe-925a-4235-bbf7-4d057f250e09",
        method: "DELETE",
        address: "{{baseurl}}/courseModules/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Course",
        id: "bf4e642e-aa4a-4bbb-af54-73ba9963c74f",
        method: "POST",
        address: "{{baseurl}}/courses/withFile",
        data: {
          title: "test course1",
          description: "test desc 1",
          thumbnail:
            files["/home/aman/Pictures/Screenshot from 2021-06-05 14-51-49.png"]
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Course Topics", function() {
      postman[Request]({
        name: "CourseTopics",
        id: "72ca6547-e871-4e3d-a28f-c1bd075bcf71",
        method: "POST",
        address: "{{baseurl}}/courseTopics",
        data:
          '{\r\n    "course_module_id": "1",\r\n    "topic_type_id": "1",\r\n    "topic_type":"VIDEO",\r\n    "title":"Video 1"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseTopics",
        id: "1671fd59-eee2-48b6-b35d-eec1262c4fb5",
        method: "GET",
        address: "{{baseurl}}/courseTopics",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseTopics/{id}",
        id: "befc75b4-315f-4f2b-9f39-9d5ca06fc413",
        method: "GET",
        address: "{{baseurl}}/courseTopics/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseTopics/{id}",
        id: "7e04be02-0145-4380-89f2-3abc0f658a62",
        method: "PUT",
        address: "{{baseurl}}/courseTopics/1",
        data: '{\r\n    "status": "Completed"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "CourseTopics/{id}",
        id: "5203c6b6-4e5a-4177-9540-23ee98ac83cb",
        method: "DELETE",
        address: "{{baseurl}}/courseTopics/:id",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Update User Progresss",
        id: "398d7a19-f04d-48d1-a4c0-82d0e6cd6df6",
        method: "POST",
        address: "{{baseurl}}/userTopicProgress",
        data:
          '{\n    "user_id":"1",\n    "course_topic_id":"1",\n    "status":"Completed"\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Courses", function() {
      postman[Request]({
        name: "Coruse",
        id: "6d7c8cf0-3735-4bc8-902b-68c6f48b7099",
        method: "GET",
        address: "{{baseurl}}/courses/",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Course/{id}",
        id: "aa0df419-f138-4593-ada7-f458ca4a4bad",
        method: "GET",
        address: "{{baseurl}}/courses/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Course/{id}",
        id: "139688f7-186a-4876-8661-f35441d1e37f",
        method: "PUT",
        address: "{{baseurl}}/courses/1",
        data: '{\r\n    "status": "COMPLETED"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Course{id}",
        id: "075b90cb-62ae-46f9-a26a-3de62db9b5a8",
        method: "DELETE",
        address: "{{baseurl}}/courses/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Videos", function() {
      postman[Request]({
        name: "Videos",
        id: "6722395a-15a2-42d4-ae80-028a9824fad6",
        method: "POST",
        address: "{{baseurl}}/videos",
        data:
          '{\r\n    "module": "Health",\r\n    "video_stream_id": "BWUi6BS9T5Y"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Videos",
        id: "71e00253-ca40-43ae-beee-41b3ea0a84af",
        method: "GET",
        address: "{{baseurl}}/videos",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Videos/{id}",
        id: "dc6edde6-ba5f-4522-95f6-979b53eba381",
        method: "GET",
        address: "{{baseurl}}/videos/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Videos/{id}",
        id: "8e0c3537-f35d-4aac-ae0a-1488c7168c61",
        method: "PUT",
        address: "{{baseurl}}/videos/1",
        data: '{\r\n    "status": "ACTIVE"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Videos/{id}",
        id: "8aee7ce8-b91a-4c82-9c10-56ee302d5c72",
        method: "DELETE",
        address: "{{baseurl}}/videos/27",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Worksheets", function() {
      postman[Request]({
        name: "Worksheets",
        id: "34374376-2d0f-4eb6-b840-db2546a9d292",
        method: "POST",
        address: "{{baseurl}}/worksheets",
        data:
          '{\r\n    "course_module_id": "1",\r\n    "topic_type_id": "1",\r\n    "topic_type":"VIDEO",\r\n    "title":"Video 1"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Worksheets/{id}/response",
        id: "b2d2a731-3f21-4211-b5be-e30c83e1105e",
        method: "POST",
        address: "{{baseurl}}/worksheets/1/response",
        data: {
          attachment_1:
            files["/home/aman/Pictures/Screenshot from 2022-03-23 22-34-31.png"]
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "worksheets",
        id: "5f691586-1727-4a9e-99ee-107c9fe4ebae",
        method: "GET",
        address: "{{baseurl}}/worksheets",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "worksheets/{id}",
        id: "d8161396-2719-4ac0-b143-6b5a69acf4f1",
        method: "GET",
        address: "{{baseurl}}/worksheets/1",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "worksheets/{id}",
        id: "e43ab795-101f-49b9-a357-a66950cdfa7c",
        method: "PUT",
        address: "{{baseurl}}/worksheets/1",
        data: '{\r\n    "status": "COMPLETED"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "worksheets/{id}",
        id: "e3aacbdd-d71a-4166-bb6d-f6d0ea7b97bb",
        method: "DELETE",
        address: "{{baseurl}}/worksheets/:id",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Teams", function() {
      postman[Request]({
        name: "Teams",
        id: "f1311a00-b97d-477c-aaf3-e70fba6f3649",
        method: "POST",
        address: "{{baseurl}}/teams",
        data:
          '{\r\n    "mentor_id": "12",\r\n    "team_name": "fast_five"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Teams",
        id: "0073adb7-f2e9-45e0-a499-2e1713382fa5",
        method: "GET",
        address: "{{baseurl}}/teams",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Teams{id}",
        id: "d0abe8fb-e43c-4aea-9fb7-bd8bf814dd93",
        method: "GET",
        address: "{{baseurl}}/teams/:id",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Teams/{id}",
        id: "3601c9a5-ccff-4fdd-b424-50bd2af6545b",
        method: "PUT",
        address: "{{baseurl}}/teams/:id",
        data: '{\r\n    "status": "Active"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Teams/{id}",
        id: "765d480a-4f9f-4715-bdab-d6c83881d865",
        method: "DELETE",
        address: "{{baseurl}}/teams/:id",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Notifications", function() {
      postman[Request]({
        name: "Notifications sent to current user",
        id: "c238c90c-89b7-4282-a8db-8521d27b08e7",
        method: "GET",
        address: "{{baseurl}}/notifications/tome",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Sent a new Notifications",
        id: "0c46f4c5-a856-4959-9506-e406518e243b",
        method: "POST",
        address: "{{baseurl}}/notifications/send",
        data:
          '{\r\n    "title": "My Notification",\r\n    "message": "This is a test notification",\r\n    "target_audience": "ALL",\r\n    "notification_type": "PUSH",\r\n    "status": "PUBLISHED"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Sent a new Notifications with Poster",
        id: "cb2442ae-48a9-4852-92be-d01fac33c2f3",
        method: "POST",
        address: "{{baseurl}}/notifications/sendwithposter",
        data: {
          title: "My Notification",
          message: "This is a test notification",
          target_audience: "ALL",
          notification_type: "PUSH",
          status: "PUBLISHED",
          image:
            files[
              "C:/Users/haris/OneDrive/Pictures/Screenshot 2022-04-05 213415.png"
            ]
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Organization", function() {
      postman[Request]({
        name: "Organizations",
        id: "c84d6115-2ee0-4efe-9ee7-eba19c821b34",
        method: "POST",
        address: "{{baseurl}}/organizations",
        data:
          '{\r\n    "organization_name": "rk college",\r\n    "organization_code": "rk223",\r\n    "details": "rk college intermedite junior"\r\n}',
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(201);
          });

          pm.test("Verify success message", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.status_type).to.eql("success");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Organization check",
        id: "e644cfe2-d84e-43fb-903b-9711363de074",
        method: "POST",
        address: "{{baseurl}}/organizations/checkOrg",
        data:
          '{\r\n    "organization_code": "rk223",\r\n        "organization_name": "rk college"\r\n\r\n}',
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });

          pm.test("Your test name", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("file found");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "OrganizationInvalidCheck",
        id: "175585c6-54a4-4bf4-80cf-8395048c8b26",
        method: "POST",
        address: "{{baseurl}}/organizations/checkOrg",
        data:
          '{\r\n    "organization_code": "rk223_12312332",\r\n        "organization_name": "rk college"\r\n\r\n}',
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(400);
          });

          pm.test("Your test name", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("Bad Request");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Organizations/withFile",
        id: "27e0e46d-0594-42ed-bb31-2a3d072656e9",
        method: "POST",
        address: "{{baseurl}}/organizations",
        data:
          '{\r\n    "organization_name": "rk college",\r\n    "organization_code": "rk223",\r\n    "details": "rk college intermedite junior"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Organizations",
        id: "345bcd07-9bfa-469c-82a7-932fda5892e0",
        method: "GET",
        address: "{{baseurl}}/organizations",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Organizations/{id}",
        id: "923679e5-27bd-40a2-ae07-6938ca5d5c0b",
        method: "GET",
        address: "{{baseurl}}/organizations/114",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Organizations/{id}",
        id: "0d68ffaa-46f8-4dfb-9144-7dc9c753a4a6",
        method: "PUT",
        address: "{{baseurl}}/organizations/2",
        data: '{\r\n    "status": "ACTIVE"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Organizations/{id}",
        id: "a7f60d2f-b69f-41cc-8f6d-7159f26bd955",
        method: "DELETE",
        address: "{{baseurl}}/organizations/113",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Faqs", function() {
      postman[Request]({
        name: "Faqs",
        id: "c591c066-e0b5-4c42-b93c-296d6a8bcd2d",
        method: "POST",
        address: "{{baseurl}}/faqs",
        data:
          '{\r\n    "question": "Health",\r\n    "answer": "BWUi6BS9T5Y",\r\n    "faq_category_id":"1"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqsCrud",
        id: "82cba59c-954a-485d-a86a-543bc0cfd723",
        method: "POST",
        address: "{{baseurl}}/crud/faq",
        data:
          '{\r\n    "question": "Health",\r\n    "answer": "BWUi6BS9T5Y",\r\n    "faq_category_id":"1"\r\n}',
        post(response) {
          pm.test("Create FAQ", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.status_type).to.eql("success");
          });

          pm.test("Status code is 200", function() {
            pm.response.to.have.status(201);
          });
          saveData = JSON.parse(responseBody);

          pm.environment.set("faq_id", saveData.data[0].faq_id);
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Faqs",
        id: "436cc2d5-d690-435b-bd68-5f9765edeb90",
        method: "GET",
        address: "{{baseurl}}/faqs",
        post(response) {
          pm.test("List all FAQ's", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("OK");
          });

          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
          let a = pm.response.json();
          saveData = JSON.stringify(a);

          pm.environment.set("faq_id", saveData.data[0].dataValues[0].faq_id);
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Faqs/{id}",
        id: "154742f7-1033-4586-a960-7a44100a67ec",
        method: "GET",
        address: "{{baseurl}}/faqs/{{faq_id}}",
        post(response) {
          pm.test("Verify Data", function() {
            var jsonData = pm.response.json();

            var a = pm.environment.get("faq_id");
            pm.expect(jsonData.data[0].faq_id).to.eql(a);
          });
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Faqs/{id} Crud",
        id: "59bdc8f9-601b-4779-9ee9-7538ffd0b7c1",
        method: "GET",
        address: "{{baseurl}}/crud/faq/{{faq_id}}",
        post(response) {
          pm.test("Verify Data", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.data[0].faq_id).to.eql(5);
          });
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Faqs/crudParamData",
        id: "bd086b7c-1422-401a-beb5-013487f7e610",
        method: "GET",
        address: "{{baseurl}}/faqs/3",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Faqs/{id}",
        id: "a4b9c20a-02b3-4d79-9d65-639601e8c74d",
        method: "PUT",
        address: "{{baseurl}}/faqs/5",
        data: '{\r\n    "status": "ACTIVE"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Faqs/CRUD{id}",
        id: "33437afb-3af1-4f47-a350-5f27538d7c0f",
        method: "PUT",
        address: "{{baseurl}}/faqs/5",
        data: '{\r\n    "status": "ACTIVE"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Faqs/{id}",
        id: "54452797-6e3d-45a4-9811-8dc9d30284ba",
        method: "DELETE",
        address: "{{baseurl}}/faqs/{{faq_id}}",
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });

          postman.setNextRequest("FaqsCrud");
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Faqs/crud/delete",
        id: "2ad4f07f-b7e0-418f-8031-9aa3a3f51e09",
        method: "DELETE",
        address: "{{baseurl}}/crud/faq/{{faq_id}}",
        pre() {
          postman.setNextRequest("FaqsCrud");
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("FaqCategories", function() {
      postman[Request]({
        name: "FaqCategories",
        id: "2cccaa57-7dc3-4101-a1a1-1bc2cc8903ba",
        method: "POST",
        address: "{{baseurl}}/faqCategories",
        data: '{\r\n    "category_name": "Wealth"\r\n}',
        post(response) {
          pm.test("Faqs", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.status_type).to.eql("success");
          });

          pm.test("Status code is 200", function() {
            pm.response.to.have.status(201);
          });
          saveData = JSON.parse(responseBody);

          pm.environment.set(
            "faq_category_id",
            saveData.data[0].faq_category_id
          );
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqCategoriesCrud",
        id: "afaa0bcc-1133-413c-af01-aa9d9ebd6b3b",
        method: "POST",
        address: "{{baseurl}}/faqCategories",
        data: '{\r\n    "category_name": "Wealth"\r\n}',
        post(response) {
          pm.test("Faqs", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.status_type).to.eql("success");
          });

          pm.test("Status code is 200", function() {
            pm.response.to.have.status(201);
          });
          saveData = JSON.parse(responseBody);

          pm.environment.set(
            "faq_category_id",
            saveData.data[0].faq_category_id
          );
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqCategories",
        id: "dca4e81e-15f5-49d9-ad0d-fb4fb83bf20c",
        method: "GET",
        address: "{{baseurl}}/faqCategories",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqCategoriesCRUD",
        id: "d7e0f962-135d-4ae9-bfce-818d903b1f35",
        method: "GET",
        address: "{{baseurl}}/faqCategories",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqCategoriesCRUDId",
        id: "7b911023-abb7-4c24-9187-2bf6850c88b3",
        method: "GET",
        address: "{{baseurl}}/faqCategorie/{{faq_category_id}}",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqCategories/{id}",
        id: "fa20e3c6-45a9-4ccb-97b0-e0ed8781f03d",
        method: "GET",
        address: "{{baseurl}}/faqCategories/{{faq_category_id}}",
        post(response) {
          pm.test("Verify Data", function() {
            var jsonData = pm.response.json();

            var a = pm.environment.get("faq_category_id");
            pm.expect(jsonData.data[0].faq_category_id).to.eql(a);
          });
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqCategories/{id}",
        id: "e8f6d503-6b6d-41f1-809a-aa2d00645812",
        method: "PUT",
        address: "{{baseurl}}/faqCategories/{{faq_category_id}}",
        data: '{\r\n    "Status": "DRAFT"\r\n}',
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqCategories/{id}",
        id: "d35a75b6-6e56-4dec-8a3b-d88650fd927c",
        method: "DELETE",
        address: "{{baseurl}}/faqCategories/{{faq_category_id}}",
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });

          postman.setNextRequest("FaqCategories");
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "FaqCategoriesCrud",
        id: "706284ff-7366-4dfd-8b84-49747df225c2",
        method: "DELETE",
        address: "{{baseurl}}/faqCategorie/{{faq_category_id}}",
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    postman[Request]({
      name: "Healthcheck",
      id: "4b483d71-7459-40dd-8a6a-a8b7a8a8f92d",
      method: "GET",
      address: "{{URL}}/healthcheck",
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
      }
    });
  });
}
