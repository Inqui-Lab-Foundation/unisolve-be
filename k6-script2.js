// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import "./libs/shim/urijs.js";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    baseurl: "http://15.207.254.154:3002/api/v1",
    token: "Login to generate the token",
    URL: "http://15.207.254.154:3002s"
  },
  environment: {
    baseurl: "https://apiqa.inquitech.in/api/v1",
    token: "",
    randomUserName: "",
    postFixUrl: "@unisolve.org",
    randomStudentName: "",
    admin: "admin",
    student: "student",
    mentor: "mentor",
    randomMentorName: "",
    evaluator: "evaluator",
    randomEvaluatorName: "",
    faq_id: "",
    faq_category_id: "",
    organization_id: "",
    team_id: "",
    video_id: "",
    course_id: "",
    course_topic_id: "",
    course_module_id: "",
    categoryName: "Wealth",
    category_name: "z3H3r1gWARBwIswB",
    evaluater: "",
    randomEvaluatertName: "",
    randomEvaluaterName: "",
    evaluater_id: "",
    quiz_id: "",
    timeout: "1000",
    user_id: "",
    mentor_user_id: "",
    otp: ""
  }
});

export default function() {
  group("V1", function() {
    group("Admins", function() {
      postman[Request]({
        name: "Login",
        id: "0c446ab8-c79a-4518-bc15-d68e26620edd",
        method: "POST",
        address: "{{baseurl}}/admins/login",
        data:
          '{\r\n    "username": "admin2e82KwsamoAUkG@unisolve.org",\r\n    "password": "wHm6eGCL7uFOArs="\r\n}',
        post(response) {
          pm.test("Successful POST request", function() {
            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            if (pm.response.code == 200 || pm.response.code == 201) {
              const response = pm.response.json();
              pm.environment.set("token", response.data[0].token);
              pm.collectionVariables.set("token", response.data[0].token);
            }
            pm.test("Login check and status type", function() {
              var jsonData = pm.response.json();
              pm.expect(jsonData.message).to.eql("Login Successful");
              pm.expect(jsonData.status_type).to.eql("success");
            });
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });

      postman[Request]({
        name: "Logout",
        id: "3b0048b6-150a-43e7-9139-e6d55b538745",
        method: "GET",
        address: "{{baseurl}}/admins/logout",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("FaqCategories", function() {
      postman[Request]({
        name: "FaqCategories",
        id: "884f6b7a-82da-4c70-b371-65dc9d699a49",
        method: "GET",
        address: "{{baseurl}}/faqCategories",
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });

    group("Faqs", function() {
      postman[Request]({
        name: "Faqs",
        id: "aad6f155-584b-4f64-b580-99da977a925c",
        method: "GET",
        address: "{{baseurl}}/faqs",
        post(response) {
          pm.test("List all FAQ's", function() {
            var jsonData = pm.response.json();
            pm.expect(jsonData.message).to.eql("OK");
          });

          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
          //saveData = JSON.parse(responseBody);

         // pm.environment.set("faq_id", saveData.data[0].dataValues[0].faq_id);
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
        }
      });
    });
  });
}
